Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =10000
select count (*) as records
from attribute


ii. Business table =10000

select count (*) as records
from business

iii. Category table =10000

select count (*) as records
from category

iv. Checkin table =10000

select count (*) as records
from checkin

v. elite_years table =10000

select count (*) as records
from elite_years

vi. friend table = 10000

select count (*) as records
from friend

vii. hours table =10000

select count (*) as records
from hours

viii. photo table = 10000

select count (*) as records
from photo

ix. review table = 10000

select count (*) as records
from review

x. tip table = 10000

select count (*) as records
from tip

xi. user table =10000
	
select count (*) as records
from user


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
select count( distinct id)
from business

ii. Hours = 1562
select count (distinct (business_id))
from hours


iii. Category =2643
select count (distinct business_id)
from category

iv. Attribute = 1115

select count (distinct business_id)
from attribute

v. Review =10000 (using the primary key )
select COUNT (DISTINCT id)
from review


vi. Checkin =  493

select COUNT (DISTinct business_id)
from checkin


vii. Photo = 10000
select COUNT (DISTinct id)
from photo


viii. Tip = 537 (Using foreign key = user_id)

select count (distinct (user_id))
from tip

ix. User = 10000
select count (distinct (id))
from user

x. Friend = 9415 (using foreign key = friend_id)
select count (distinct (friend_id))
from friend


xi. Elite_years = 2780
 select count (distinct (user_id))
from elite_years



Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:
	
	select *
from user
where id is null or
review_count is null or
yelping_since is null or
useful is null or
funny is null or
cool is null or
fans is null or
average_stars is null or
compliment_hot is null or
compliment_more is null or
compliment_profile is null or
compliment_cute is null or
compliment_list is null or
 compliment_note is null or
 compliment_plain  is null or
 compliment_cool is null or
 compliment_funny  is null or
 compliment_writer is null or
  compliment_photos is null 


	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1	max:	5	avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max: 53		avg:  1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

SQL code used to arrive at answer:
select city, sum(review_count) as reviews
from business
group by city
order by reviews desc

	
	Copy and Paste the Result Below:
 city            | reviews |
+-----------------+---------+
| Las Vegas       |   82854 |
| Phoenix         |   34503 |
| Toronto         |   24113 |
| Scottsdale      |   20614 |
| Charlotte       |   12523 |
| Henderson       |   10871 |
| Tempe           |   10504 |
| Pittsburgh      |    9798 |
| Montréal        |    9448 |
| Chandler        |    8112 |
| Mesa            |    6875 |
| Gilbert         |    6380 |
| Cleveland       |    5593 |
| Madison         |    5265 |
| Glendale        |    4406 |
| Mississauga     |    3814 |
| Edinburgh       |    2792 |
| Peoria          |    2624 |
| North Las Vegas |    2438 |
| Markham         |    2352 |
| Champaign       |    2029 |
| Stuttgart       |    1849 |
| Surprise        |    1520 |
| Lakewood        |    1465 |
| Goodyear        |    1155 |
+-----------------+---------+
(Output limit exceeded, 25 of 362 total rows shown)	

6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
select stars, count (city)
from business
where city = 'Avon'
group by stars



Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
stars | count (city) |
+-------+--------------+
|   1.5 |            1 |
|   2.5 |            2 |
|   3.5 |            3 |
|   4.0 |            2 |
|   4.5 |            1 |
|   5.0 |            1 |
+-------+--------------+
(Zero rows)

ii. Beachwood

SQL code used to arrive at answer:

select stars, count (city)
from business
where city = 'Beachwood'
group by stars



Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------+--------------+
| stars | count (city) |
+-------+--------------+
|   2.0 |            1 |
|   2.5 |            1 |
|   3.0 |            2 |
|   3.5 |            2 |
|   4.0 |            1 |
|   4.5 |            2 |
|   5.0 |            5 |
+-------+--------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
select name, review_count
from user
order by review_count desc
limit 3


		
	Copy and Paste the Result Below:
		

 name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339

8. Does posing more reviews correlate with more fans? There is not a strong positive correlation between reviews and fans

	Please explain your findings and interpretation of the results:
	
The user with the most reviews does not have the most fans. Also, the user with the second-most reviews actually has 50 fans—which is not that many according to the distribution.

Although the number of fans decreases as number of reviews decreases, there is not a strong correlation.

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: 
There are more reviews with the word love
+------+------+
| hate | love |
+------+------+
|  232 | 1780 |
+------+------+

	
	SQL code used to arrive at answer:

select 
sum (case 
  when text like "%hate%" then 1 else 0 end )as hate,

sum (case 
when text like "%love%" then 1 else 0 end) as love

from review

	
10. Find the top 10 users with the most fans:

SQL code used to arrive at answer:

select name, fans
from user u
left join
review r on
u.id = r.id
order by fans desc
limit 10

	
Copy and Paste the Result Below:

name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
City: Toronto, Category: Food
i. Do the two groups you chose to analyze have a different distribution of hours?
Yes, businesses with 2-3 stars open earlier from 8am, 9am or 11 am compared to the businesses with 4-5 stars which open from 11 am, 3 pm or 5 pm

ii. Do the two groups you chose to analyze have a different number of reviews?
 Yes        
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

The businesses with 2 -3 stars are mostly located in downtown/entertainment areas
SQL code used for analysis:

i)

select distinct (hours), business.stars, business.city
from business
inner join
hours on

business.id = hours.business_id

inner join

category on hours.business_id = category.business_id

where business.city = 'Toronto' 
and business.stars = 5
		

ii)

select sum (review_count), business.stars
from business
inner join
hours on

business.id = hours.business_id

inner join

category on hours.business_id = category.business_id

where business.city = 'Toronto' 
group by stars


iii)
select distinct business.address, business.stars,  neighborhood
from business
inner join
hours on

business.id = hours.business_id

inner join

category on hours.business_id = category.business_id

where business.city = 'Toronto' 
and business.stars between 2 and 3



2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
   The ones that are open have higher review count than the closed ones

select sum (review_count), is_open
from business
group  by is_open

| sum (review_count) | is_open |
+--------------------+---------+
|              35261 |       0 |
|             269300 |       1 |
+--------------------+---------+
         
ii. Difference 2:

Open businesses work longer hours than closed ones.


         
SQL code used for analysis:

select distinct hours.hours, business.is_open, business.stars
from business

inner join

hours on

business.id = hours.business_id
where is_open = 0
order by stars desc
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
        I want to determine what category has the most 4 and 5 star ratings since higher ratings most likely means that the category is doing well.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
          I will need to combined the business and category tables for this analysis. This will enable me to group the data by category and filter through the 4 and 5 stars.        
iii. Output of your finished dataset:
         
         ------------+------------------------+
| total_stars | category               |
+-------------+------------------------+
|          29 | Restaurants            |
|          19 | Shopping               |
|          14 | Food                   |
|          13 | Health & Medical       |
|          12 | Home Services          |
|           9 | Local Services         |
|           9 | Nightlife              |
|           8 | Bars                   |
|           8 | Beauty & Spas          |
|           7 | American (Traditional) |
|           7 | Automotive             |
|           6 | Active Life            |
|           4 | Auto Repair            |
|           4 | Bakeries               |
|           4 | Doctors                |
|           4 | Fashion                |
|           4 | Hair Salons            |
|           4 | Japanese               |
|           4 | Mexican                |
|           4 | Sandwiches             |
|           4 | Specialty Food         |
|           3 | Arts & Entertainment   |
|           3 | Carpet Cleaning        |
|           3 | Chiropractors          |
|           3 | Desserts               |
+-------------+------------------------+
iv. Provide the SQL code you used to create your final dataset:
select count(stars) as total_stars, category
from category

inner join

business on

category.business_id = business.id
where stars between 4 and 5
group by category 
order by total_stars desc




Eve’s addition
Relationship between business average rating and is_open to see whether higher ratings have more open days

from business b 
inner join
hours h on
b.id = h.business_id
where city = "Toronto"
group by avg_stars


+--------------------+-----------+
|               open | avg_stars |
+--------------------+-----------+
| 0.7291666666666666 | 2-3.5     |
|                1.0 | 4-5       |
+--------------------+-----------+

Determining which businesses with certain attributes  has the most ratings
select avg (b.stars) as average_ratings, a.name as Attributes
from business b inner join
attribute a on
b.id = a.business_id
group by a.name
having  a.name IN ('WiFi', 'HasTV', 'WheelchairAccessible')
order by avg(b.stars) desc
+--------------------+----------------------+
|    average_ratings | Attributes           |
+--------------------+----------------------+
| 3.4444444444444446 | WheelchairAccessible |
| 3.3846153846153846 | WiFi                 |
|               3.25 | HasTV                |

